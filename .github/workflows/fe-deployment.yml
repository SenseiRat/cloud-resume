name: 'Deploy front end'

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, main ]
    paths: [ "front-end/**" ]
  pull_request:
    branches: [ master, main ]
    paths: [ "front-end/**" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_github_token: ${{ secrets.PERSONAL_TOKEN}}
  TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
  TF_VAR_backend_bucket: ${{ secrets.BACKEND_BUCKET }}
  TF_VAR_resume_bucket: ${{ secrets.RESUME_BUCKET }}
  TF_VAR_cloudfront_distribution_id: ${{ secrets.CF_DIST_ID }}
  TF_VAR_dynamodb_table_name: ${{ secrets.DYNAMODB_TABLE_NAME }}
  TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
  TF_VAR_cicd_resume_policy: ${{ secrets.CICD_RESUME_POLICY }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: sudo apt-get install tidy -yqq
      
      - name: Validate and lint files
        run: |
          tidy -eq ./front-end/*.html
          # csslint ./front-end/*.css
          # jslint ./front-end/*.js
  
  deploy:
    if: startsWith(github.event.head_commit.message, 'Merge pull request')
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
    
    steps:
      - uses: actions/checkout@v2
      - name: Upload the files to S3  
        run: |
          aws s3 --region ${AWS_REGION} sync front-end "s3://${RESUME_BUCKET}"

  clear_cache:
    if: startsWith(github.event.head_commit.message, 'Merge pull request')
    runs-on: ubuntu-latest
    environment: production
    needs: [ deploy ]

    defaults:
      run:
        shell: bash
    
    steps:
      - uses: actions/checkout@v2
      - name: Invalidate the Cloudfront Cache
        run: aws cloudfront --region ${AWS_REGION} create-invalidation --distribution-id "${CF_DIST_ID}" --paths /*
