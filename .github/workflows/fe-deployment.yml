name: 'Deploy front end'

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    paths: [ "front-end/**" ]
  pull_request:
    branches: [ master, main ]
    paths: [ "front-end/**" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    #if: startsWith(!github.event.head_commit.message, 'Merge pull request')
    runs-on: ubuntu-latest
    environment: production
    
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: sudo apt-get install tidy -yqq
      
      - name: Validate and lint files
        run: |
          tidy -eq ./front-end/*.html
          # csslint ./front-end/*.css
          # jslint ./front-end/*.js
  
  deploy:
    if: startsWith(github.event.head_commit.message, 'Merge pull request')
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
    
    steps:
      - uses: actions/checkout@v2

      - name: Upload the files to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          aws s3 --region ${AWS_REGION} sync front-end "s3://${S3_BUCKET_NAME}"
          # for FILE in front-end/*; do
          #  echo "Uploading $(basename ${FILE}) to ${S3_BUCKET_NAME}"
          #   aws s3 --region ${AWS_REGION} cp "$FILE" "s3://${S3_BUCKET_NAME}/$(basename ${FILE}) " 
          # done

  clear_cache:
    if: startsWith(github.event.head_commit.message, 'Merge pull request')
    runs-on: ubuntu-latest
    environment: production
    needs: [ deploy ]

    defaults:
      run:
        shell: bash
    
    steps:
      - uses: actions/checkout@v2

      - name: Invalidate the Cloudfront Cache
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CF_DIST_ID: ${{ secrets.CF_DIST_ID }}
        run: aws cloudfront --region ${AWS_REGION} create-invalidation --distribution-id "${CF_DIST_ID}" --paths /*
